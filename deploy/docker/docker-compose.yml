version: '3.8'

services:
  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: cloudmonitor-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root123
      MYSQL_DATABASE: cloudmonitor
      MYSQL_USER: cloudmonitor
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init-mysql.sql:/docker-entrypoint-initdb.d/init-mysql.sql
    networks:
      - cloudmonitor-network
    restart: unless-stopped

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: cloudmonitor-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cloudmonitor-network
    restart: unless-stopped

  # InfluxDB 时序数据库
  influxdb:
    image: influxdb:2.7-alpine
    container_name: cloudmonitor-influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: admin123
      DOCKER_INFLUXDB_INIT_ORG: cloudmonitor
      DOCKER_INFLUXDB_INIT_BUCKET: metrics
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: your-token-here
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - cloudmonitor-network
    restart: unless-stopped

  # Kafka 消息队列
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: cloudmonitor-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - cloudmonitor-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: cloudmonitor-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - cloudmonitor-network
    restart: unless-stopped

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: cloudmonitor-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - cloudmonitor-network
    restart: unless-stopped

  # Grafana 可视化
  grafana:
    image: grafana/grafana:10.1.0
    container_name: cloudmonitor-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - cloudmonitor-network
    restart: unless-stopped

  # Jaeger 链路追踪
  jaeger:
    image: jaegertracing/all-in-one:1.48
    container_name: cloudmonitor-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - cloudmonitor-network
    restart: unless-stopped

  # Elasticsearch 搜索引擎
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: cloudmonitor-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - cloudmonitor-network
    restart: unless-stopped

  # Kibana 日志可视化
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: cloudmonitor-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - cloudmonitor-network
    restart: unless-stopped

  # CloudMonitor-Go 微服务
  agent:
    build:
      context: ../../
      dockerfile: cmd/agent/Dockerfile
    container_name: cloudmonitor-agent
    ports:
      - "9001:9001"
      - "8001:8001"
    environment:
      - CONFIG_PATH=/app/configs/config.yaml
    volumes:
      - ../../configs:/app/configs
    networks:
      - cloudmonitor-network
    depends_on:
      - collector
    restart: unless-stopped

  collector:
    build:
      context: ../../
      dockerfile: cmd/collector/Dockerfile
    container_name: cloudmonitor-collector
    ports:
      - "9002:9002"
      - "8002:8002"
    environment:
      - CONFIG_PATH=/app/configs/config.yaml
    volumes:
      - ../../configs:/app/configs
    networks:
      - cloudmonitor-network
    depends_on:
      - kafka
      - influxdb
    restart: unless-stopped

  processor:
    build:
      context: ../../
      dockerfile: cmd/processor/Dockerfile
    container_name: cloudmonitor-processor
    ports:
      - "9003:9003"
      - "8003:8003"
    environment:
      - CONFIG_PATH=/app/configs/config.yaml
    volumes:
      - ../../configs:/app/configs
    networks:
      - cloudmonitor-network
    depends_on:
      - kafka
      - influxdb
    restart: unless-stopped

  alerting:
    build:
      context: ../../
      dockerfile: cmd/alerting/Dockerfile
    container_name: cloudmonitor-alerting
    ports:
      - "9004:9004"
      - "8004:8004"
    environment:
      - CONFIG_PATH=/app/configs/config.yaml
    volumes:
      - ../../configs:/app/configs
    networks:
      - cloudmonitor-network
    depends_on:
      - processor
    restart: unless-stopped

  query:
    build:
      context: ../../
      dockerfile: cmd/query/Dockerfile
    container_name: cloudmonitor-query
    ports:
      - "9005:9005"
      - "8005:8005"
    environment:
      - CONFIG_PATH=/app/configs/config.yaml
    volumes:
      - ../../configs:/app/configs
    networks:
      - cloudmonitor-network
    depends_on:
      - influxdb
      - mysql
    restart: unless-stopped

  web:
    build:
      context: ../../
      dockerfile: cmd/web/Dockerfile
    container_name: cloudmonitor-web
    ports:
      - "9006:9006"
      - "8006:8006"
    environment:
      - CONFIG_PATH=/app/configs/config.yaml
    volumes:
      - ../../configs:/app/configs
    networks:
      - cloudmonitor-network
    depends_on:
      - query
      - alerting
    restart: unless-stopped

volumes:
  mysql_data:
  redis_data:
  influxdb_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  cloudmonitor-network:
    driver: bridge
